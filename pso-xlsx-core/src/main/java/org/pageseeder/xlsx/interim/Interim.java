/*
 * Copyright (c) 1999-2012 weborganic systems pty. ltd.
 */
package org.pageseeder.xlsx.interim;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import org.pageseeder.xlsx.config.TransformConfig;
import org.pageseeder.xlsx.XLSXException;
import org.pageseeder.xlsx.config.SplitLevel;
import org.pageseeder.xlsx.core.WorkBook;
import org.pageseeder.xlsx.core.WorkSheet;
import org.pageseeder.xlsx.util.Namespaces;
import org.pageseeder.xlsx.util.SharedStrings;
import org.pageseeder.xlsx.util.XML;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Creates the interim data.
 *
 * @author Christophe Lauret
 * @version 19 April 2012
 */
public final class Interim {

  /**
   * The output directory.
   */
  private File _output;

  /**
   * The configuration.
   */
  private TransformConfig _config;

  /**
   *
   * @param output The output directory.
   * @param config The configuration.
   */
  public Interim(File output, TransformConfig config) {
    this._output = output;
    this._config = config;
  }

  /**
   * Returns the shared strings from the specified file.
   *
   * @param book   The workbook to process.
   * @param shared The shared strings to resolve cell values.
   */
  public void process(WorkBook book, SharedStrings shared) {
    try (Writer xml = getWriterForXML("workbook.xml")) {
      // Generate the XML for the workbook
      ;
      start(xml);
      xml.append("<workbook title=\"").append(XML.attribute(book.getTitle())).append("\">\n");

      // Process worksheets
      for (WorkSheet sheet : book.sheets()) {
        if (sheet.size() > 0) {
          process(book, sheet, shared, xml);
        }
      }

      xml.append("</workbook>\n");
    } catch (IOException ex) {
      ex.printStackTrace();
    }
  }

  /**
   * Returns the shared strings from the specified file.
   *
   * @param book   The workbook being processed.
   * @param sheet  The worksheet being processed.
   * @param shared The shared strings to resolve cell values.
   */
  private void process(WorkBook book, WorkSheet sheet, SharedStrings shared, Appendable xmlbook) {
    Writer writer = null;
    String path = sheet.name().trim()+".xml";
    try {
      Appendable xml;
      if (this._config.getSplitLevel() == SplitLevel.workbook) {
        xml = xmlbook;
        xml.append("<worksheet title=\"").append(XML.attribute(sheet.name())).append("\">\n");
      } else {
        // Copy reference in workbook
        xmlbook.append("  <worksheet");
        xmlbook.append(" href=\"").append(path).append('"');
        xmlbook.append(" title=\"").append(XML.attribute(sheet.name())).append('"');;
        xmlbook.append("/>\n");
        // Start new file for work sheet
        writer = getWriterForXML(path);
        xml = writer;
        start(xml);
        xml.append("<worksheet");
        xml.append(" title=\"").append(XML.attribute(sheet.name())).append('"');
        xml.append(" book-title=\"").append(XML.attribute(book.getTitle())).append('"');
        xml.append(">\n");
      }
      Processor handler = new Processor(book, sheet, shared, this._config, xml);
      try {
        XML.parse(sheet.source(), handler, true);
      } catch (XLSXException ex) {
        throw new XLSXException("Unable to parse shared strings", ex.getCause());
      }
      xml.append("</worksheet>\n");
    } catch (IOException ex) {
      throw new XLSXException(ex);
    } finally {
      if (writer != null)
        try {
          writer.close();
        } catch (IOException ex) {
          // oh well we tried
        }
    }
  }

  public Writer getWriterForXML(String path) throws FileNotFoundException {
    File out = new File(this._output, path);
    FileOutputStream fos = new FileOutputStream(out);
    return new OutputStreamWriter(fos, StandardCharsets.UTF_8);
  }

  /**
   * Write the start of the XML.
   *
   * @param xml   Where to append the XML.
   *
   * @throws IOException if thrown while writing the XML.
   */
  public static void start(Appendable xml) throws IOException {
    xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    xml.append("<!--\n");
    xml.append(" Generated by PageSeeder ANT Excel import Task.\n");
    // TODO add date, time and version
    xml.append("-->\n");
  }

  /**
   * Processes the specified file.
   *
   * @author Christophe Lauret
   * @version 18 April 2012
   */
  private class Processor extends DefaultHandler {

    /** The workbook. */
    private final WorkBook _book;

    /** The worksheet. */
    private final WorkSheet _sheet;

    /** The shared strings. */
    private final SharedStrings _shared;

    /** Split level */
    private final SplitLevel level;

    /** Column to use for the filename */
    private final int filenameIndex;

    /** Buffer. */
    private StringBuilder buffer = new StringBuilder();

    /** Indicates whether to write to the buffer. */
    private boolean record = false;

    /** The current row being processed. */
    private Row row;

    /** The current column being processed. */
    private String col;

    /** <code>true</code> if reference to shared string. */
    private boolean isShared;

    /** <code>true</code> if the titles should been computed. */
    private boolean getTitles;

    /** Where the XML should go */
    private Appendable _xml;

    /** Where to store the rows */
    private final File rows;

    /**
     * Sole constructor.
     *
     * @param shared the shared strings to resolve the values.
     * @param config the configuration.
     */
    public Processor(WorkBook book, WorkSheet sheet, SharedStrings shared, TransformConfig config, Appendable xml) {
      this._book = book;
      this._sheet = sheet;
      this._shared = shared;
      this.level = config.getSplitLevel();
      this.filenameIndex = config.getFilenameColumn() - 1;
      this._xml = xml;
      this.getTitles = config.hasHeaders();
      if (config.getSplitLevel() == SplitLevel.row) {
        this.rows = new File(Interim.this._output, this._sheet.name());
        this.rows.mkdir();
      } else {
        this.rows = null;
      }
    }

    @Override
    public void startElement(String uri, String localName, String name, Attributes atts)
        throws SAXException {
      if (Namespaces.SPREADSHEETML.equals(uri)) {
        if ("c".equals(name)) {
          // <c r="A1" s="1" t="s">
          this.col = Row.toColumn(atts.getValue("r"));
          this.isShared = "s".equals(atts.getValue("t"));

        } else if ("v".equals(name)) {
          this.record = true;

        } else if ("row".equals(name)) {
          // <row r="1" spans="1:6">
          if (this.row == null) {
            this.row = new Row(atts.getValue("spans"));
          }
          int position = Integer.parseInt(atts.getValue("r"));
          this.row.setPosition(position);
        }
      }
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
      if (this.record)
        this.buffer.append(ch, start, length);
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
      if (Namespaces.SPREADSHEETML.equals(uri)) {
        if ("c".equals(qName)) {
          this.col = null;
          this.isShared = false;

        } else if ("v".equals(qName)) {
          String value = this.buffer.toString();
          if (this.isShared) {
            value = this._shared.get(Integer.parseInt(value));
          }
          if (this.getTitles)
            this.row.title(this.col, value);
          else
            this.row.value(this.col, value);
          this.buffer.setLength(0);
          this.record = false;
        } else if ("row".equals(qName)) {
          try {
            // Serialise the titles
            if (this.getTitles) {
              this.getTitles = false;
              if (this.level != SplitLevel.row) {
                this.row.toHeadXML(this._xml);
              }
            // Serialise the values
            } else if (this.row.hasValue()) {
              if (this.level != SplitLevel.row) {
                // Inline by sheet / book
                this.row.toXML(this._xml);

              } else {
                // In a new file for each row
                String title = null;
                String filename;
                if (this.filenameIndex >= 0) {
                  title = this.row.value(this.filenameIndex);
                }
                if (title == null) {
                  NumberFormat nf = new DecimalFormat("0000");
                  title = nf.format(this.row.getPosition());
                }
                filename = title.trim().replaceAll("\\W+", "_");
                String path = this._sheet.name()+"/"+filename+".xml";
                try (Writer xml = Interim.this.getWriterForXML(path)) {
                  Interim.start(xml);
                  this.row.toXML(xml, title, this._sheet.name(), this._book.getTitle());
                } catch (IOException ex) {
                  throw new XLSXException(ex);
                }
                // Reference in book / sheet
                this._xml.append("  <row href=\"").append(path).append("\" title=\"").append(XML.attribute(title)).append("\"/>\n");
              }
            }

          } catch (Exception ex) {
            ex.printStackTrace();
            // TODO: handle exception
          }
          this.row.reset();
        }
      }
    }

  }
}
